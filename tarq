[1mdiff --git a/src/Cards.js b/src/Cards.js[m
[1mindex 6c02ea8..4538a79 100644[m
[1m--- a/src/Cards.js[m
[1m+++ b/src/Cards.js[m
[36m@@ -13,9 +13,13 @@[m [mfor (let c in Cards) {[m
 }[m
 [m
 export const MTGACards = {};[m
[31m-for(let cid in Cards)[m
[32m+[m[32mexport const CardVersionsByName = {};[m
[32m+[m[32mfor(let cid in Cards) {[m
 	if("arena_id" in Cards[cid])[m
 		MTGACards[Cards[cid].arena_id] = Cards[cid];[m
[32m+[m	[32mif(!CardVersionsByName[Cards[cid].name]) CardVersionsByName[Cards[cid].name] = [];[m
[32m+[m	[32mCardVersionsByName[Cards[cid].name].push(cid);[m
[32m+[m[32m}[m
 [m
 export const CardsByName = JSON.parse(fs.readFileSync("./data/CardsByName.json"));[m
 for(let name in CardsByName)[m
[1mdiff --git a/src/parseCardList.js b/src/parseCardList.js[m
[1mindex 7f77cff..f3baf16 100644[m
[1m--- a/src/parseCardList.js[m
[1m+++ b/src/parseCardList.js[m
[36m@@ -1,7 +1,6 @@[m
[31m-import { Cards, CardsByName } from "./Cards.js";[m
[32m+[m[32mimport { Cards, CardsByName, CardVersionsByName } from "./Cards.js";[m
 [m
 const lineRegex = /^(?:(\d+)\s+)?([^(\v\n]+)??(?:\s\((\w+)\)(?:\s+(\w+))?)?\s*$/;[m
[31m-const CardsIds = Object.keys(Cards);[m
 [m
 export const parseLine = line => {[m
 	line = line.trim();[m
[36m@@ -38,38 +37,42 @@[m [mexport const parseLine = line => {[m
 		);[m
 	}[m
 [m
[32m+[m	[32m// Only the name is supplied, get the prefered version of the card[m
 	if(!set && !number && name in CardsByName)[m
 		return [count, CardsByName[name].id];[m
 [m
[31m-	let cardIDs = CardsIds.filter([m
[31m-		id =>[m
[31m-		Cards[id].name == name &&[m
[31m-			(!set || Cards[id].set === set) &&[m
[31m-			(!number || Cards[id].collector_number === number)[m
[31m-	);[m
[31m-	if (cardIDs.length === 0) {[m
[31m-		// If not found, try doubled faced cards before giving up![m
[31m-		cardIDs = CardsIds.filter([m
[32m+[m	[32m// Search for the correct set and collector number[m
[32m+[m	[32mif(name in CardVersionsByName) {[m
[32m+[m		[32mlet cardIDs = CardVersionsByName[name].filter([m
 			id =>[m
[31m-			Cards[id].name.startsWith(name + " //") &&[m
 				(!set || Cards[id].set === set) &&[m
 				(!number || Cards[id].collector_number === number)[m
 		);[m
[32m+[m		[32mif (cardIDs.length === 0) {[m
[32m+[m			[32m// If not found, try doubled faced cards before giving up![m
[32m+[m			[32mcardIDs = CardVersionsByName[name.split(" //")[0]].filter([m
[32m+[m				[32mid =>[m
[32m+[m					[32m(!set || Cards[id].set === set) &&[m
[32m+[m					[32m(!number || Cards[id].collector_number === number)[m
[32m+[m			[32m);[m
[32m+[m		[32m}[m
[32m+[m		[32mif (cardIDs.length > 0) {[m
[32m+[m			[32mreturn [count, cardIDs.reduce((best, cid) => {[m
[32m+[m				[32mif(parseInt(Cards[cid].collector_number) < parseInt(Cards[best].collector_number))[m
[32m+[m					[32mreturn cid;[m
[32m+[m				[32mreturn best;[m
[32m+[m			[32m}, cardIDs[0])];[m
[32m+[m		[32m}[m
 	}[m
[31m-	if (cardIDs.length > 0) {[m
[31m-		return [count, cardIDs.reduce((best, cid) => {[m
[31m-			if(parseInt(Cards[cid].collector_number) < parseInt(Cards[best].collector_number))[m
[31m-				return cid;[m
[31m-			return best;[m
[31m-		}, cardIDs[0])];[m
[31m-	}[m
[32m+[m[41m	[m
[32m+[m	[32mconst message = (name in CardsByName ? `Could not find this exact version of '${name}' (${set}) in our database, but other printings are available.` : `Could not find '${name}' in our database.`) + ` If you think it should be there, please contact us via email or our Discord server.`;[m
 [m
 	return [[m
 		{[m
 			error: {[m
 				type: "error",[m
 				title: `Card not found`,[m
[31m-				text: `Could not find '${name}' in our database. If you think it should be there, please contact us via email or our Discord server.`,[m
[32m+[m				[32mtext: message,[m
 				footer: `Full line: '${line}'`,[m
 			},[m
 		},[m
[36m@@ -77,7 +80,7 @@[m [mexport const parseLine = line => {[m
 	];[m
 };[m
 [m
[31m-export function parseCardList(cardlist, options) {[m
[32m+[m[32mexport function parseCardList(cardlist, options) {[m[41m	[m
 	try {[m
 		const lines = cardlist.split(/\r\n|\n/);[m
 		let cardList = {};[m
